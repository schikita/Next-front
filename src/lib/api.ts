"use client";

import { setCookie, getCookie, deleteCookie } from "cookies-next";
import { useRouter } from "next/navigation";

const BASE_URL = "https://zn.by/api";

/** üîπ –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */
export const requestAuthCode = async (email: string) => {
  const response = await fetch(`${BASE_URL}/auth/`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email }),
  });

  if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞");
};

/** üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ –≤—Ö–æ–¥ */
export const verifyAuthCode = async (email: string, code: string) => {
  try {
    const response = await fetch("https://zn.by/api/auth/verify/", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email, code }),
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.detail || "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞");
    }

    console.log("‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:", data);
    return data; // –í–µ—Ä–Ω–µ–º –æ–±—ä–µ–∫—Ç —Å user, access-token –∏ refresh-token
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞:", error.message);
    return null;
  }
};


/** üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access-—Ç–æ–∫–µ–Ω–∞ */
export const refreshAccessToken = async (): Promise<string | null> => {
  const refreshToken = getCookie("refresh-token")?.toString();

  if (!refreshToken) {
    console.warn("‚ö†Ô∏è –ù–µ—Ç refresh-—Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.");
    return null;
  }

  console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º refresh-—Ç–æ–∫–µ–Ω:", refreshToken);

  try {
    const response = await fetch(`${BASE_URL}/auth/token/refresh/`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ refresh: refreshToken }),
    });

    const data = await response.json();
    if (!response.ok || !data.access) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", response.status, data);
      if (response.status === 401) {
        console.warn("‚ö†Ô∏è Refresh-—Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º...");
        await logoutUser();
      }
      return null;
    }

    setCookie("access-token", data.access, { secure: false, sameSite: "lax", path: "/" });

    return data.access;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
    await logoutUser();
    return null;
  }
};

/** üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
export async function getUser() {
  let accessToken: string | null = getCookie("access-token")?.toString() || null;

  if (!accessToken) {
    console.warn("‚ö†Ô∏è –ù–µ—Ç access-—Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
    accessToken = await refreshAccessToken();
    if (!accessToken) {
      console.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.");
      return null;
    }
  }

  try {
    const response = await fetch(`${BASE_URL}/auth/user/`, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${accessToken}`,
        "Content-Type": "application/json",
      },
    });

    if (response.status === 401) {
      console.warn("‚ö†Ô∏è Access-—Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
      accessToken = await refreshAccessToken();
      if (!accessToken) {
        console.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º.");
        await logoutUser();
        return null;
      }
      return await getUser();
    }

    if (!response.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${response.status}`, await response.text());
      return null;
    }

    return await response.json();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    return null;
  }
}

/** üîπ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ */
export const logoutUser = async () => {
  console.log("üîπ –†–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
  deleteCookie("access-token");
  deleteCookie("refresh-token");

  try {
    const response = await fetch(`${BASE_URL}/auth/logout/`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
    });

    if (!response.ok) {
      console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", await response.text());
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞:", error);
  }
};
