"use client";

import { setCookie, getCookie, deleteCookie } from "cookies-next";
import { useRouter } from "next/navigation";

const BASE_URL = "https://zn.by/api";

/** üîπ –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */
export const requestAuthCode = async (email: string) => {
  const response = await fetch(`${BASE_URL}/auth/`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email }),
  });

  if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞");
};

/** üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ –≤—Ö–æ–¥ */
export const verifyAuthCode = async (email: string, code: string) => {
  try {
    const response = await fetch("https://zn.by/api/auth/verify/", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email, code }),
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.detail || "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞");
    }

    console.log("‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:", data);
    return data; // –í–µ—Ä–Ω–µ–º –æ–±—ä–µ–∫—Ç —Å user, access-token –∏ refresh-token
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞:");
    return null;
  }
};


/** üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access-—Ç–æ–∫–µ–Ω–∞ */
export const refreshAccessToken = async (): Promise<string | null> => {
  const refreshToken = getCookie("refresh-token")?.toString();

  if (!refreshToken) {
    console.warn("‚ö†Ô∏è –ù–µ—Ç refresh-—Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.");
    return null;
  }

  console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º refresh-—Ç–æ–∫–µ–Ω:", refreshToken);

  try {
    const response = await fetch(`${BASE_URL}/auth/token/refresh/`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ refresh: refreshToken }),
    });

    const data = await response.json();
    if (!response.ok || !data.access) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", response.status, data);
      if (response.status === 401) {
        console.warn("‚ö†Ô∏è Refresh-—Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º...");
        await logoutUser();
      }
      return null;
    }

    setCookie("access-token", data.access, { secure: false, sameSite: "lax", path: "/" });

    return data.access;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
    await logoutUser();
    return null;
  }
};

/** üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
export async function getUser() {
  let accessToken: string | null = getCookie("access-token")?.toString() || null;

  if (!accessToken) {
    console.warn("‚ö†Ô∏è –ù–µ—Ç access-—Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
    accessToken = await refreshAccessToken();
    if (!accessToken) {
      console.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.");
      return null;
    }
  }

  try {
    const response = await fetch(`${BASE_URL}/auth/user/`, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${accessToken}`,
        "Content-Type": "application/json",
      },
    });

    if (response.status === 401) {
      console.warn("‚ö†Ô∏è Access-—Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
      accessToken = await refreshAccessToken();
      if (!accessToken) {
        console.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º.");
        await logoutUser();
        return null;
      }
      return await getUser();
    }

    if (!response.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${response.status}`, await response.text());
      return null;
    }

    return await response.json();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    return null;
  }
}

/** üîπ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ */
export const logoutUser = async () => {
  console.log("üîπ –†–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
  deleteCookie("access-token");
  deleteCookie("refresh-token");

  try {
    const response = await fetch(`${BASE_URL}/auth/logout/`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
    });

    if (!response.ok) {
      console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", await response.text());
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞:", error);
  }
};


/** üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –∫–∞–Ω–∞–ª–∞ */
export const updateChannelLogo = async (channelId: string, file: File) => {
  const formData = new FormData();
  formData.append("favicon", file);

  try {
    const response = await fetch(`${BASE_URL}/api/v1/channels/${channelId}/logo`, {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${getCookie("access-token")}`, // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      },
      body: formData,
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞");
    }

    return data; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ª–æ–≥–æ—Ç–∏–ø–æ–º –∫–∞–Ω–∞–ª–∞
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ –∫–∞–Ω–∞–ª–∞:", error);
    throw error;
  }
};


// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç.–¥.)
export const updateChannel = async (
  channelId: string,
  channelData: FormData | object,
  method: string = "PATCH"
) => {
  const isFormData = channelData instanceof FormData;

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
  const headers = isFormData
    ? { "Content-Type": "multipart/form-data" } // –ï—Å–ª–∏ —ç—Ç–æ FormData, –¥–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–π Content-Type
    : { "Content-Type": "application/json" }; // –ò–Ω–∞—á–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ JSON

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
  const response = await fetch(`${BASE_URL}/api/v1/sources/${channelId}/`, {
    method: method,
    headers: headers,
    body: isFormData ? channelData : JSON.stringify(channelData), // –ï—Å–ª–∏ —ç—Ç–æ FormData, –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ–±—ä–µ–∫—Ç
  });

  if (!response.ok) {
    throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞");
  }

  return await response.json(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
};

export const deleteNews = async (newsId: number) => {
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DELETE –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const response = await fetch(`${BASE_URL}/api/v1/news/${newsId}/`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–æ–∫–µ–Ω–æ–º
        // Authorization: `Bearer ${accessToken}`,
      },
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if (!response.ok) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å.");
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    return await response.json();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏:", error);
    throw error; // –ë—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—ë –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
  }
};

// –í –≤–∞—à–µ–º —Ñ–∞–π–ª–µ @/lib/api.ts

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∫–∞–Ω–∞–ª–∞
export const getPublications = async (channelId: number) => {
  const response = await fetch(`${BASE_URL}/api/v1/news/?source=${channelId}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    },
  });

  if (!response.ok) {
    throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π');
  }

  const data = await response.json();
  return data.results; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
};
