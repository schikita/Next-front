"use client";

import { setCookie, getCookie, deleteCookie } from "cookies-next";

const BASE_URL = "https://zn.by/api";

/** üîπ –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */
export const requestAuthCode = async (email: string) => {
  const response = await fetch(`${BASE_URL}/auth/`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email }),
  });

  if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞");
};

/** üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ –≤—Ö–æ–¥ */
export const verifyAuthCode = async (email: string, code: string) => {
  const payload = { email: email.trim(), code: code.trim() }; // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
  console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö:", payload);

  const response = await fetch(`${BASE_URL}/auth/verify/`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(payload),
  });

  const responseData = await response.json();

  if (!response.ok) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞:", response.status, responseData);
    throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥");
  }

  console.log("‚úÖ –¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã:", responseData);

  setCookie("access-token", responseData.access, { secure: true, sameSite: "lax", path: "/" });
  setCookie("refresh-token", responseData.refresh, { secure: true, sameSite: "lax", path: "/" });

  return responseData;
};


/** üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access-—Ç–æ–∫–µ–Ω–∞ */
export const refreshAccessToken = async (): Promise<string> => {
  const refreshToken = getCookie("refresh-token");

  if (!refreshToken) {
    console.warn("‚ö†Ô∏è –ù–µ—Ç refresh-—Ç–æ–∫–µ–Ω–∞, —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
    deleteCookie("access-token");
    deleteCookie("refresh-token");
    throw new Error("–ù–µ—Ç refresh-—Ç–æ–∫–µ–Ω–∞");
  }

  console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º refresh-—Ç–æ–∫–µ–Ω:", refreshToken);

  const response = await fetch(`${BASE_URL}/auth/token/refresh/`, {
    method: "POST",
    credentials: "include",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ refresh: refreshToken }),
  });

  const data = await response.json();
  console.log("üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);

  if (!response.ok) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", data);
    deleteCookie("access-token");
    deleteCookie("refresh-token");
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω");
  }

  setCookie("access-token", data.access, { secure: true, sameSite: "Lax", path: "/" });
  console.log("‚úÖ –ù–æ–≤—ã–π access-—Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:", data.access);

  return data.access;
};


/** üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
export async function getUser() {
  let accessToken = getCookie("access-token");

  if (!accessToken) {
    try {
      console.warn("‚ö†Ô∏è –ù–µ—Ç access-—Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
      accessToken = await refreshAccessToken();
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
      throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞)");
    }
  }

  const response = await fetch(`${BASE_URL}/auth/user/`, {
    method: "GET",
    credentials: "include",
    headers: {
      "Authorization": `Bearer ${accessToken}`,
      "Content-Type": "application/json",
    },
  });

  if (response.status === 401) {
    console.warn("‚ö†Ô∏è Access-—Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
    accessToken = await refreshAccessToken();
    return getUser(); // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
  }

  if (!response.ok) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${response.status}`, await response.text());
    throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  }

  return response.json();
};

/** üîπ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ */
export const logoutUser = async () => {
  const accessToken = getCookie("access-token");

  if (!accessToken) {
    console.warn("‚ö†Ô∏è –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑–ª–æ–≥–∏–Ω–µ–Ω");
    return;
  }

  try {
    const response = await fetch(`${BASE_URL}/auth/logout/`, {
      method: "POST",
      headers: { "Authorization": `Bearer ${accessToken}` },
    });

    if (!response.ok) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞:", await response.text());
    }

    deleteCookie("access-token");
    deleteCookie("refresh-token");
    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞:", error);
  }
};
